#!/usr/bin/env node

// Copyright (c) Microsoft Corporation. All rights reserved.

var minimist = require('minimist');
var os = require('os');
var simulateServer = require('taco-simulate-server');

try {
    var args = processArgs();
    require('./../src/simulate')(args).catch(function (e) {
        simulateServer.log.error(e);
    });
} catch (e) {
    simulateServer.log.error(e.message || e);
}

function processArgs() {
    try {
        function unknownOptHandler(optName) {
            // Throw error on unknown option. Note for '--port': minimist does not support the 'number' type, so we can't list 'port' as a known option.
            if (optName.indexOf("-") === 0 && optName !== '--port') {
                throw new Error(`Unknown option '${optName}'`);
            }

            return true;
        }

        var parserOptions = {
            string: ['dir', 'target'],
            boolean: ['nolivereload', 'preparecss'],
            default: {
                dir: null,
                port: null,
                target: null
            },
            unknown: unknownOptHandler
        };
        var parsed = minimist(process.argv.slice(2), parserOptions);   // Remove 'node' and 'simulate' using Array.prototype.slice()

        if (parsed._.length > 1) {
            throw new Error('Too many arguments');
        }

        return {
            platform: parsed._.length === 1 ? parsed._[0] : null,
            target: parsed.target,
            nolivereload: parsed.nolivereload,
            preparecss: parsed.preparecss,
            port: parsed.port,
            dir: parsed.dir
        };
    } catch (err) {
        throw new Error(`Error parsing arguments: ${err.message || err}${os.EOL}${os.EOL}${getUsageString()}`);
    }
}

function getUsageString() {
    return `Usage:${os.EOL}simulate [PLATFORM] [--dir DIR] [--nolivereload] [--port PORT] [--preparecss] [--target TARGET]`;
}
